scrape_youtube_channel:
  description: >
    Scrape the latest five videos from the specified YouTube channel.
    Extract relevant information about each video, such as title, view count,
    video URL, and short description.

    YouTube channel handle:
    {youtube_channel_handle}
  expected_output: >
    JSON containing metadata for the five most recent videos from the specified channel,
    including title, description, and direct URLs.
  agent: scrape_agent

process_videos_task:
  description: >
    Process the scraped video URLs and add each one to the vector database.
    Normalize the content and ensure that all entries are added correctly.

    - Pull vector-friendly metadata
    - Embed and store into vector DB
    - Do not make up or infer any missing info
  expected_output: >
    Successfully normalized and stored all video content into the vector database.
  agent: vector_db_agent

find_initial_information_task:
  description: >
    Fill out the ContentCreatorInfo model with as much verified data as possible:
    
    ```
    class ContentCreatorInfo(BaseModel):
      first_name: Optional[str]
      last_name: Optional[str]
      main_topics_covered: Optional[List[str]]
      bio: Optional[str]
      email_address: Optional[str]
      linkedin_url: Optional[str]
      has_linked_in: Optional[bool]
      x_url: Optional[str]
      has_twitter: Optional[bool]
      has_skool: Optional[bool]
    ```

    - All data must come from verified content, never assume.
    - If looking for full info fails, search for each attribute individually.
    - Use prompt phrases like: "my name is", "you can contact me at", etc.
  expected_output: >
    A completed ContentCreatorInfo model (as complete as possible),
    leaving missing fields as None when no verifiable data is found.
  agent: general_research_agent

follow_up_task:
  description: >
    Search for any remaining missing values in the ContentCreatorInfo model.
    Dig into the vector database and re-query search tools if necessary.

    - If full profiles aren't found, search each field individually
    - Use common patterns for names, emails, and social handles
    - Be persistent and creative
  expected_output: >
    Fill in missing fields in the ContentCreatorInfo model.
    Ensure everything is accurate and backed by the source.
  agent: follow_up_agent

fallback_task:
  description: >
    As a last resort, perform deep scraping and crawling of the YouTube channel
    (handle: {youtube_channel_handle}) to find any remaining missing information.

    - Ensure the ContentCreatorInfo model is fully populated
    - All results must be derived from scraping / verified sources
    - Do not guess or generate content
  expected_output: >
    A fully completed ContentCreatorInfo model with all remaining fields populated,
    based entirely on reliable sources and scraping output.
  agent: fallback_agent
